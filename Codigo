import java.awt.*;
import java.io.*;
import javax.swing.*;

public class AhorcaWorld {
    private static final String USER_FILE = "/home/nicmau/Escriptori/Maurons/Ahorcado/usuarios.txt";

    public static void main(String[] args) {
        SwingUtilities.invokeLater(AhorcaWorld::showLoginScreen);
    }

    private static void showLoginScreen() {
        JFrame loginFrame = new JFrame("");
        loginFrame.setUndecorated(true);
        loginFrame.setResizable(false);
        loginFrame.setSize(400, 300);
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setLocationRelativeTo(null);
        loginFrame.setLayout(null);

        JButton closeButton2 = new JButton("X");
        closeButton2.setFont(new Font("SansSerif", Font.BOLD, 10));
        closeButton2.setForeground(Color.WHITE);
        closeButton2.setBackground(Color.RED);
        closeButton2.setFocusPainted(false);
        closeButton2.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        closeButton2.addActionListener(e -> System.exit(0));
         
    
        // Establecer la posición del botón (por ejemplo, en la esquina superior derecha)
        closeButton2.setBounds(360, 10, 28, 25);
        loginFrame.add(closeButton2);


        
        
        Font modernFont = new Font("SansSerif", Font.PLAIN, 16);

        
        
        JLabel userLabel = new JLabel("Usuario:");
        userLabel.setFont(modernFont);
        userLabel.setBounds(50, 50, 100, 30);
        JTextField userField = new JTextField();
        userField.setFont(modernFont);
        userField.setBounds(150, 50, 200, 30);
        
        JLabel passLabel = new JLabel("Contraseña:");
        passLabel.setFont(modernFont);
        passLabel.setBounds(50, 100, 100, 30);
        JPasswordField passField = new JPasswordField();
        passField.setFont(modernFont);
        passField.setBounds(150, 100, 200, 30);
        
        JButton loginButton = new JButton("Iniciar Sesión");
        loginButton.setFont(modernFont);
        loginButton.setBounds(50, 160, 140, 40);
        loginButton.setBackground(Color.DARK_GRAY);
        loginButton.setForeground(Color.WHITE);
        loginButton.setFocusPainted(false);

        JButton registerButton = new JButton("Registrarse");
        registerButton.setFont(modernFont);
        registerButton.setBounds(210, 160, 140, 40);
        registerButton.setBackground(Color.DARK_GRAY);
        registerButton.setForeground(Color.WHITE);
        registerButton.setFocusPainted(false);
        
        loginButton.addActionListener(e -> {
            if (authenticateUser(userField.getText(), new String(passField.getPassword()))) {
                loginFrame.dispose();
                showGameWindow();
            } else {
                JOptionPane.showMessageDialog(loginFrame, "Usuario o contraseña incorrectos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        registerButton.addActionListener(e -> registerUser(userField, passField, registerButton, loginButton));

        loginFrame.add(userLabel);
        loginFrame.add(userField);
        loginFrame.add(passLabel);
        loginFrame.add(passField);
        loginFrame.add(loginButton);
        loginFrame.add(registerButton);

        loginFrame.setVisible(true);

      
    }

    private static boolean authenticateUser(String username, String password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(USER_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 2 && parts[0].equals(username) && parts[1].equals(password)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private static void registerUser(JTextField userField, JPasswordField passField, JButton registerButton, JButton loginButton) {
        if (userField.getText().isEmpty() || new String(passField.getPassword()).isEmpty()) {
            JOptionPane.showMessageDialog(null, "Usuario y contraseña no pueden estar vacíos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(USER_FILE, true))) {
            // Registrar usuario en el archivo
            writer.write(userField.getText() + "," + new String(passField.getPassword()));
            writer.newLine();
            JOptionPane.showMessageDialog(null, "Usuario registrado con éxito.", "Registro Exitoso", JOptionPane.INFORMATION_MESSAGE);

            // Deshabilitar campos y botones después del registro
            userField.setEditable(false);
            passField.setEditable(false);
            registerButton.setEnabled(false);
            loginButton.setEnabled(false);
        } catch (IOException e) {
            e.printStackTrace();
        }    
    
}

    private static void showGameWindow() {
        JFrame frame = new JFrame("Juego del Ahorcado");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setUndecorated(true);

        

        JPanel panel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                ImageIcon background = new ImageIcon("/home/nicmau/Escriptori/Maurons/Ahorcado/fondo.png");
                g.drawImage(background.getImage(), 0, 0, getWidth(), getHeight(), this);
            }
        };
        panel.setLayout(new BorderLayout());

        JButton closeButton = new JButton("X");
        closeButton.setFont(new Font("SansSerif", Font.BOLD, 20));
        closeButton.setForeground(Color.WHITE);
        closeButton.setBackground(Color.RED);
        closeButton.setFocusPainted(false);
        closeButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        closeButton.addActionListener(e -> System.exit(0));

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        topPanel.setOpaque(false);
        topPanel.add(closeButton);

        panel.add(topPanel, BorderLayout.NORTH);

        frame.setContentPane(panel);
        frame.setVisible(true);

    

    


    }
}
